Problem illustration: In our recent simulation, we found that ns-2 cannot prevent packet drops from happening at senders. This is simply because ns-2 implemente queue/buffer with link instead of node. Unlike a real system, say Linux, which will stop application from passing more new packets when the internal buffer is full, ns-2 does not check the buffer occupancy and $ of queuing packets, hence, even when the buffer run out of space, TCP module still delieve new packets to the buffer, as long as cwnd allows.

ns-2 modification: To solve this problem, we introduce some buffer-related parameters in TCP module so that TCP is aware of the real-time spare buffer space. Fig 4 (2) shows our modification of packet transmission flow in ns-2. Based on current implementation, we introduce another condition check called “buffer availability”, i.e., queue_occupied < queue_size. By doing so, TCP will jump out of the while loop in send_much () function when the buffer is detected to be full. However, barely doing so is not done yet, since when the queue has available space again, TCP module should begin sending packets right away, if allowed. However, send_much () needs a new ACK reception event to invoke, which may or may not come in time, resulting in an undesired idle in transmission. By contrast, Linux can guarantee timely data transmission in such case. Therefore, to invoke send_much () in time, we insert a fake ACK-reception event in scheduler (in ns-2, all events are scheduled by the same scheduler). By doing so, the fake ACK will trigger send_much () right after the buffer has free space again. Note that we take special action for those fake ACKs so that TCP will not be disordered, i.e., a normal ACK makes TCP update parameters, like cwnd and packet-in-flight, etc., while the fake one will not. The modification based on current ns-2 requires around 100-line new code in total, involving less than 10 files.

We have written a paper to report this problem, which compares the simulation results generated by our modified ns-2 and current ns-2. By taking Linux(Ubuntu) as the benchmark, we show that our modification makes the simulation results much closer to the testbed one in certain simulation settings, compared with current ns-2.
